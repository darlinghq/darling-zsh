/* Generated automatically */
#ifndef have_Src_Zle_complete_globals
#define have_Src_Zle_complete_globals

extern mod_import_variable zlong compcurrent;
extern mod_import_variable zlong complistmax;
extern zlong complistlines;
extern zlong compignored;
extern mod_import_variable char**compwords;
extern mod_import_variable char**compredirs;
extern mod_import_variable char*compprefix;
extern mod_import_variable char*compsuffix;
extern mod_import_variable char*complastprefix;
extern mod_import_variable char*complastsuffix;
extern mod_import_variable char*compisuffix;
extern mod_import_variable char*compqiprefix;
extern mod_import_variable char*compqisuffix;
extern mod_import_variable char*compquote;
extern mod_import_variable char*compqstack;
extern mod_import_variable char*comppatmatch;
extern mod_import_variable char*complastprompt;
extern char*compiprefix;
extern char*compcontext;
extern char*compparameter;
extern char*compredirect;
extern char*compquoting;
extern char*comprestore;
extern char*complist;
extern char*compinsert;
extern char*compexact;
extern char*compexactstr;
extern char*comppatinsert;
extern char*comptoend;
extern char*compoldlist;
extern char*compoldins;
extern char*compvared;
extern Param*comprpms;
extern Param*compkpms;
extern mod_import_function void freecmlist _((Cmlist l));
extern mod_import_function void freecmatcher _((Cmatcher m));
extern void freecpattern _((Cpattern p));
extern mod_import_function Cmatcher cpcmatcher _((Cmatcher m));
extern mod_import_function Cpattern cp_cpattern_element _((Cpattern o));
extern mod_import_function Cmatcher parse_cmatcher _((char*name,char*s));
extern mod_import_function void ignore_prefix _((int l));
extern mod_import_function void ignore_suffix _((int l));
extern mod_import_function void restrict_range _((int b,int e));
extern void makecompparams _((void));
extern void comp_setunset _((int rset,int runset,int kset,int kunset));
extern struct hookdef comphooks[];
extern int setup_ _((UNUSED(Module m)));
extern int features_ _((Module m,char***features));
extern int enables_ _((Module m,int**enables));
extern int boot_ _((Module m));
extern int cleanup_ _((Module m));
extern int finish_ _((UNUSED(Module m)));

#endif /* !have_Src_Zle_complete_globals */
